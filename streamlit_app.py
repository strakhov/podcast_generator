import os
import shutil
import tempfile
import requests
import pandas as pd
import streamlit as st
from pathlib import Path
from dotenv import load_dotenv

load_dotenv()

BACKEND_URL = st.text_input(
    "Backend URL", value=os.getenv("BACKEND_URL","http://localhost:8000")
)

st.title("üéôÔ∏è Podcast Generator")

# --- –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ---
uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV (–∫–æ–ª–æ–Ω–∫–∞ 'words')", type="csv")
input_text    = st.text_area("–ò–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é", height=200)

st.markdown("---")
st.markdown("**–ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –º–æ–¥–µ–ª—å LLM:** `gpt-4o`")

available_voices = [
    "en-US-Wavenet-A","en-US-Wavenet-B","en-GB-Wavenet-C",
    "en-US-Wavenet-D","en-US-Wavenet-E","en-US-Wavenet-F",
]

iv = st.selectbox("Interviewer voice", available_voices, index=0)
gv = st.selectbox("Guest voice",        available_voices, index=1)

if st.button("üöÄ Generate Podcast"):
    # 1) First, get the humanized dialogue JSON
    files = {}
    data  = {}
    if uploaded_file:
        files = {"file": ("words.csv", uploaded_file.getvalue(), "text/csv")}
    elif input_text.strip():
        data = {"text": input_text}
    else:
        st.error("–ù—É–∂–Ω–æ –ª–∏–±–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å CSV, –ª–∏–±–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç")
        st.stop()

    try:
        r = requests.post(
            f"{BACKEND_URL}/generate-dialogue/",
            files=files or None,
            data = data  or None,
            timeout=120
        )
        r.raise_for_status()
        dialog = r.json()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞: {e}")
        st.stop()

    # 2) –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
    st.markdown("**üó®Ô∏è –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –¥–∏–∞–ª–æ–≥–∞:**")
    for turn in dialog:
        prefix = "**Interviewer:**" if turn["speaker"]=="Interviewer" else "**Guest:**"
        st.markdown(f"{prefix} {turn['text']}")

    # 3) –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º MP3
    try:
        # –ø–æ–≤—Ç–æ—Ä–Ω–æ —à–ª—ë–º –ª–∏–±–æ —Ñ–∞–π–ª, –ª–∏–±–æ JSON dialogue
        if files:
            # backend —Å–∞–º —Å–≥–µ–Ω–µ—Ä–∏—Ç —Ç–µ–∫—Å—Ç‚ÜíQA‚Üídialogue‚Üí–∞—É–¥–∏–æ
            r2 = requests.post(
                f"{BACKEND_URL}/generate-podcast/",
                files=files,
                timeout=300
            )
        else:
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–∂–µ –≥–æ—Ç–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ JSON
            r2 = requests.post(
                f"{BACKEND_URL}/generate-podcast/",
                json={"dialogue": dialog, "interviewer_voice": iv, "guest_voice": gv},
                timeout=300
            )
        r2.raise_for_status()
        audio_bytes = r2.content
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞—É–¥–∏–æ: {e}")
        st.stop()

    # 4) –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–ª–µ–µ—Ä –∏ –¥–∞—ë–º —Å—Å—ã–ª–∫—É
    st.audio(audio_bytes, format="audio/mp3")
    st.download_button("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –ø–æ–¥–∫–∞—Å—Ç", data=audio_bytes, file_name="podcast.mp3", mime="audio/mp3")