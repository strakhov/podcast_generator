import os
import shutil
import tempfile
import json
import asyncio
import pandas as pd
import streamlit as st
from pathlib import Path
from openai import OpenAI
from pydub import AudioSegment
from google.cloud import texttospeech
from dotenv import load_dotenv

# –∑–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()

# Google credentials
os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = os.getenv(
    "GOOGLE_APPLICATION_CREDENTIALS", "podcast-generator-458516-be67f9964d96.json"
)

# OpenAI client
api_key = os.getenv("OPENAI_API_KEY")
if not api_key:
    st.error("‚ùóÔ∏è –£–∫–∞–∂–∏—Ç–µ OPENAI_API_KEY –≤ .env")
    st.stop()
openai_client = OpenAI(api_key=api_key)

# –∏–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π (–æ–Ω–∏ —Ç–µ–ø–µ—Ä—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ)
from generate_podcast import (
    generate_text_from_vocab,
    generate_interview_qa,
    humanize_dialogue,
    generate_podcast_from_dialog,
)

st.set_page_config(page_title="üéôÔ∏è Podcast Generator", layout="wide")
st.title("üéôÔ∏è Podcast Generator")

# --- –ò—Å—Ç–æ—á–Ω–∏–∫ ---
uploaded_file = st.file_uploader(
    "1) –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV (—Å—Ç–æ–ª–±–µ—Ü 'words')", type="csv"
)
input_text = st.text_area("–∏–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ –æ–ø–æ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é", height=200)

st.markdown("---")

# --- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã ---
system_prompt = st.text_input(
    "–°–∏—Å—Ç–µ–º–Ω—ã–π prompt –¥–ª—è LLM",
    value="You are a helpful assistant that creates interview Q&A"
)

model = "gpt-4o"
st.markdown(f"**–ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –º–æ–¥–µ–ª—å LLM:** `{model}`")

available_voices = [
    "en-US-Wavenet-A", "en-US-Wavenet-B", "en-GB-Wavenet-C",
    "en-US-Wavenet-D", "en-US-Wavenet-E", "en-US-Wavenet-F",
    "en-US-Wavenet-G", "en-US-Wavenet-H", "en-US-Wavenet-I",
    "en-US-Wavenet-J", "en-US-Chirp3-HD-Achernar",
    "en-US-Chirp3-HD-Achird"
]

interviewer_voice = st.selectbox("INTERVIEWER_VOICE", available_voices, index=0)
guest_voice       = st.selectbox("GUEST_VOICE",       available_voices, index=1)

if st.button("üöÄ Generate Podcast"):
    # 1) –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
    if uploaded_file:
        try:
            df = pd.read_csv(uploaded_file)
        except Exception as e:
            st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å CSV: {e}")
            st.stop()
        # –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ ‚Äì –æ–±—ë—Ä—Ç–∫–∞ asyncio.run
        source_text = asyncio.run(
            generate_text_from_vocab(
                df,
                openai_client,
                model=model,
                system_prompt=system_prompt,
                max_tokens=1024
            )
        )
    elif input_text.strip():
        source_text = input_text
    else:
        st.error("–ù—É–∂–Ω–æ –ª–∏–±–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å CSV, –ª–∏–±–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç")
        st.stop()

    st.markdown("**üîç –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é:**")
    st.write(source_text)

    # 2) Q&A
    qa = asyncio.run(
        generate_interview_qa(
            source_text,
            openai_client,
            model=model,
            system_prompt="You are a journalist and an expert in creating interviews.",
            max_tokens=2048
        )
    )
    st.markdown("**‚ùì –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã:**")
    st.text(qa)

    # 3) –û—á–µ–ª–æ–≤–µ—á–µ–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥
    try:
        dialog = asyncio.run(humanize_dialogue(qa, openai_client, model=model))
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–µ–ª–æ–≤–µ—á–∏–≤–∞–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞: {e}")
        st.stop()

    st.markdown("**üó®Ô∏è –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –¥–∏–∞–ª–æ–≥–∞:**")
    for turn in dialog:
        speaker = turn["speaker"]
        text    = turn["text"]
        prefix  = "**Interviewer:**" if speaker.lower()=="interviewer" else "**Guest:**"
        st.markdown(f"{prefix} {text}")

    # 4) –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ
    tmpdir     = tempfile.mkdtemp()
    output_mp3 = Path(tmpdir) / "podcast.mp3"
    try:
        # sync-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ —Å–∫–ª–µ–π–∫–∞
        generate_podcast_from_dialog(
            dialog=dialog,
            interviewer_voice=interviewer_voice,
            guest_voice=guest_voice,
            lang_code="en-US",
            max_pause_ms=300,
            temp_dir=tmpdir,
            final_output_path=str(output_mp3)
        )
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ç–µ–∑–µ —Ä–µ—á–∏: {e}")
        shutil.rmtree(tmpdir, ignore_errors=True)
        st.stop()

    # 5) –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞—É–¥–∏–æ –∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
    with open(output_mp3, "rb") as f:
        audio_bytes = f.read()

    st.audio(audio_bytes, format="audio/mp3")
    st.download_button(
        "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –ø–æ–¥–∫–∞—Å—Ç",
        data=audio_bytes,
        file_name="podcast.mp3",
        mime="audio/mp3"
    )

    # –æ—á–∏—Å—Ç–∫–∞ temp
    shutil.rmtree(tmpdir, ignore_errors=True)